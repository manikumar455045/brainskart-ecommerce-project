{"ast":null,"code":"import axios from 'axios';\nimport * as alertActions from '../alert/alert.action';\nimport * as AuthUtil from '../../Authentication/AuthUtil';\nimport { setHeaders } from \"../../Authentication/TokenUtil\";\nexport const USER_REGISTER_REQUEST = \"USER_REGISTER_REQUEST\";\nexport const USER_REGISTER_SUCCESS = \"USER_REGISTER_SUCCESS\";\nexport const USER_REGISTER_FAILURE = \"USER_REGISTER_FAILURE\";\nexport const GOOGLE_REGISTER_REQUEST = \"GOOGLE_REGISTER_REQUEST\";\nexport const GOOGLE_REGISTER_SUCCESS = \"GOOGLE_REGISTER_SUCCESS\";\nexport const GOOGLE_REGISTER_FAILURE = \"GOOGLE_REGISTER_FAILURE\";\nexport const USER_LOGIN_REQUEST = \"USER_LOGIN_REQUEST\";\nexport const USER_LOGIN_SUCCESS = \"USER_LOGIN_SUCCESS\";\nexport const USER_LOGIN_FAILURE = \"USER_LOGIN_FAILURE\";\nexport const USER_INFO_REQUEST = \"USER_INFO_REQUEST\";\nexport const USER_INFO_SUCCESS = \"USER_INFO_SUCCESS\";\nexport const USER_INFO_FAILURE = \"USER_INFO_FAILURE\";\nexport const UPDATE_ADDRESS_REQUEST = \"UPDATE_ADDRESS_REQUEST\";\nexport const UPDATE_ADDRESS_SUCCESS = \"UPDATE_ADDRESS_SUCCESS\";\nexport const UPDATE_ADDRESS_FAILURE = \"UPDATE_ADDRESS_REQUEST\";\nexport const LOGOUT_USER = \"LOGOUT_USER\";\n//register user\nexport const userRegister = (user, history) => {\n  return async dispatch => {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n\n    try {\n      let dataUrl = `${process.env.REACT_APP_SERVER_URL}/api/users/register`;\n      let response = await axios.post(dataUrl, user);\n      dispatch({\n        type: USER_REGISTER_SUCCESS,\n        payload: response.data\n      });\n      dispatch(alertActions.displayAlert(response.data.msg, 'success')); // alert message\n\n      history.push('/users/login');\n    } catch (error) {\n      dispatch({\n        type: USER_REGISTER_FAILURE,\n        payload: error\n      });\n    }\n  };\n}; //login user\n\nexport const loginUser = (user, history) => {\n  return async dispatch => {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n\n    try {\n      let dataUrl = `${process.env.REACT_APP_SERVER_URL}/api/users/login`;\n      let response = await axios.post(dataUrl, user);\n      dispatch({\n        type: USER_LOGIN_SUCCESS,\n        payload: response.data\n      });\n      dispatch(getUserInfo());\n      dispatch(alertActions.displayAlert(response.data.msg, 'success'));\n      history.push('/');\n    } catch (error) {\n      dispatch({\n        type: USER_LOGIN_FAILURE,\n        payload: error\n      });\n    }\n  };\n};\nexport const getUserInfo = () => {\n  return async dispatch => {\n    dispatch({\n      type: USER_INFO_REQUEST\n    });\n\n    try {\n      if (AuthUtil.isLoggedIn()) {\n        let token = AuthUtil.getToken();\n        setHeaders(token);\n        let datUrl = `${process.env.REACT_APP_SERVER_URL}/api/users/`;\n        let response = await axios.get(datUrl);\n        dispatch({\n          type: USER_INFO_SUCCESS,\n          payload: {\n            response: response.data,\n            token: AuthUtil.getToken()\n          }\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: USER_INFO_FAILURE,\n        payload: error\n      });\n    }\n  };\n};\nexport const logoutUser = () => {\n  return dispatch => {\n    dispatch({\n      type: LOGOUT_USER\n    });\n    dispatch(alertActions.displayAlert(\"You have logged out\", \"success\"));\n  };\n};\nexport const updateAddress = address => {\n  return async dispatch => {\n    dispatch({\n      type: UPDATE_ADDRESS_REQUEST\n    });\n\n    try {\n      if (AuthUtil.isLoggedIn()) {\n        setHeaders(AuthUtil.getToken());\n        let dataUrl = `${process.env.REACT_APP_SERVER_URL}/api/users/address`;\n        let response = await axios.post(dataUrl, address);\n        dispatch({\n          type: UPDATE_ADDRESS_SUCCESS,\n          payload: response.data\n        });\n        dispatch(getUserInfo());\n        dispatch(alertActions.displayAlert(response.data.msg, 'success'));\n      }\n    } catch (error) {\n      dispatch({\n        type: UPDATE_ADDRESS_FAILURE,\n        payload: error\n      });\n    }\n  };\n}; //google login or signup\n\nexport const googleLogin = (tokenID, history) => {\n  return async dispatch => {\n    dispatch({\n      type: GOOGLE_REGISTER_REQUEST\n    });\n\n    try {\n      let dataUrl = `${process.env.REACT_APP_SERVER_URL}/api/users/GoogleLogin`;\n      console.log(tokenID);\n      let response = await axios.post(dataUrl, tokenID);\n      dispatch({\n        type: GOOGLE_REGISTER_SUCCESS,\n        payload: {\n          token: response.data.token\n        }\n      });\n      dispatch(alertActions.displayAlert(response.data.msg, \"success\"));\n      history.push(\"/\");\n    } catch (error) {\n      dispatch({\n        type: GOOGLE_REGISTER_FAILURE,\n        payload: {\n          error: error\n        }\n      });\n      dispatch(alertActions.displayAlert(error, \"danger\"));\n      console.log(error);\n    }\n  };\n};","map":{"version":3,"sources":["F:/Workspace/Projects/Brains-Kart/brainskart-ecommerce-project/client/src/redux/users/user.action.ts"],"names":["axios","alertActions","AuthUtil","setHeaders","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAILURE","GOOGLE_REGISTER_REQUEST","GOOGLE_REGISTER_SUCCESS","GOOGLE_REGISTER_FAILURE","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAILURE","USER_INFO_REQUEST","USER_INFO_SUCCESS","USER_INFO_FAILURE","UPDATE_ADDRESS_REQUEST","UPDATE_ADDRESS_SUCCESS","UPDATE_ADDRESS_FAILURE","LOGOUT_USER","userRegister","user","history","dispatch","type","dataUrl","process","env","REACT_APP_SERVER_URL","response","post","payload","data","displayAlert","msg","push","error","loginUser","getUserInfo","isLoggedIn","token","getToken","datUrl","get","logoutUser","updateAddress","address","googleLogin","tokenID","console","log"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport * as alertActions from '../alert/alert.action';\r\nimport {useDispatch} from \"react-redux\";\r\nimport * as AuthUtil from '../../Authentication/AuthUtil'\r\nimport {setHeaders} from \"../../Authentication/TokenUtil\";\r\nimport {IAddress} from \"../../Modules/users/models/IUser\";\r\n\r\n\r\nexport  const USER_REGISTER_REQUEST : string = \"USER_REGISTER_REQUEST\"\r\nexport  const USER_REGISTER_SUCCESS : string = \"USER_REGISTER_SUCCESS\"\r\nexport  const USER_REGISTER_FAILURE : string = \"USER_REGISTER_FAILURE\"\r\n\r\nexport  const GOOGLE_REGISTER_REQUEST : string = \"GOOGLE_REGISTER_REQUEST\"\r\nexport  const GOOGLE_REGISTER_SUCCESS : string = \"GOOGLE_REGISTER_SUCCESS\"\r\nexport  const GOOGLE_REGISTER_FAILURE : string = \"GOOGLE_REGISTER_FAILURE\"\r\n\r\nexport  const USER_LOGIN_REQUEST : string = \"USER_LOGIN_REQUEST\"\r\nexport  const USER_LOGIN_SUCCESS : string = \"USER_LOGIN_SUCCESS\"\r\nexport  const USER_LOGIN_FAILURE : string = \"USER_LOGIN_FAILURE\"\r\n\r\nexport  const USER_INFO_REQUEST : string = \"USER_INFO_REQUEST\"\r\nexport  const USER_INFO_SUCCESS : string = \"USER_INFO_SUCCESS\"\r\nexport  const USER_INFO_FAILURE : string = \"USER_INFO_FAILURE\"\r\n\r\nexport const UPDATE_ADDRESS_REQUEST : string = \"UPDATE_ADDRESS_REQUEST\"\r\nexport const UPDATE_ADDRESS_SUCCESS : string = \"UPDATE_ADDRESS_SUCCESS\"\r\nexport const UPDATE_ADDRESS_FAILURE : string = \"UPDATE_ADDRESS_REQUEST\"\r\n\r\nexport const LOGOUT_USER : string = \"LOGOUT_USER\"\r\n\r\ninterface  IUser{\r\n    name? : string,\r\n    email : string,\r\n    password: string\r\n}\r\n//register user\r\nexport const userRegister = (user : IUser , history : any) => {\r\n    return async (dispatch : any) =>{\r\n        dispatch({\r\n            type : USER_REGISTER_REQUEST\r\n        })\r\n           try{\r\n               let dataUrl : string | undefined = `${process.env.REACT_APP_SERVER_URL}/api/users/register`\r\n               let response = await axios.post(dataUrl , user)\r\n               dispatch({\r\n                   type : USER_REGISTER_SUCCESS,\r\n                   payload : response.data\r\n               })\r\n               dispatch(alertActions.displayAlert(response.data.msg ,'success')) // alert message\r\n               history.push('/users/login');\r\n           }\r\n          catch (error) {\r\n            dispatch({\r\n                type : USER_REGISTER_FAILURE,\r\n                payload : error\r\n            })\r\n          }\r\n    }\r\n}\r\n//login user\r\n\r\nexport  const loginUser = (user : IUser , history : any) => {\r\n    return async (dispatch : any) => {\r\n        dispatch({\r\n            type : USER_LOGIN_REQUEST\r\n        })\r\n        try{\r\n            let dataUrl = `${process.env.REACT_APP_SERVER_URL}/api/users/login`\r\n            let response =  await  axios.post(dataUrl , user)\r\n            dispatch({\r\n                type : USER_LOGIN_SUCCESS,\r\n                payload : response.data\r\n            })\r\n            dispatch(getUserInfo());\r\n            dispatch(alertActions.displayAlert(response.data.msg , 'success'));\r\n            history.push('/');\r\n        }\r\n        catch (error){\r\n            dispatch({\r\n                type : USER_LOGIN_FAILURE,\r\n                payload : error\r\n            })\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport const getUserInfo = () => {\r\n    return async (dispatch: any) => {\r\n        dispatch({\r\n            type: USER_INFO_REQUEST\r\n        })\r\n        try {\r\n            if (AuthUtil.isLoggedIn()) {\r\n                let token: string | null = AuthUtil.getToken();\r\n                setHeaders(token as string);\r\n                let datUrl = `${process.env.REACT_APP_SERVER_URL}/api/users/`\r\n                let response = await axios.get(datUrl);\r\n                dispatch({\r\n                    type: USER_INFO_SUCCESS,\r\n                    payload:{\r\n                        response : response.data,\r\n                        token : AuthUtil.getToken()\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        catch(error){\r\n            dispatch({\r\n                type : USER_INFO_FAILURE,\r\n                payload :error\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const logoutUser = () => {\r\n    return (dispatch : any) => {\r\n        dispatch({\r\n            type : LOGOUT_USER\r\n        })\r\n        dispatch(alertActions.displayAlert(\"You have logged out\" , \"success\"));\r\n    }\r\n}\r\n\r\nexport const updateAddress = (address : IAddress) => {\r\n    return async (dispatch : any) => {\r\n        dispatch({\r\n            type : UPDATE_ADDRESS_REQUEST\r\n        })\r\n        try{\r\n            if(AuthUtil.isLoggedIn()){\r\n                setHeaders(AuthUtil.getToken() as string);\r\n                let dataUrl = `${process.env.REACT_APP_SERVER_URL}/api/users/address`\r\n               let response = await axios.post(dataUrl, address)\r\n                dispatch({\r\n                    type : UPDATE_ADDRESS_SUCCESS,\r\n                    payload : response.data\r\n                })\r\n                dispatch(getUserInfo());\r\n                dispatch(alertActions.displayAlert(response.data.msg, 'success'))\r\n            }\r\n        }\r\n        catch (error){\r\n            dispatch({\r\n                type : UPDATE_ADDRESS_FAILURE,\r\n                payload : error\r\n            })\r\n        }\r\n    }\r\n}\r\n//google login or signup\r\nexport const googleLogin = (tokenID : string , history : any) => {\r\n    return async (dispatch : any) => {\r\n        dispatch({\r\n            type : GOOGLE_REGISTER_REQUEST\r\n        })\r\n        try{\r\n            let dataUrl : string | undefined = `${process.env.REACT_APP_SERVER_URL}/api/users/GoogleLogin`\r\n            console.log(tokenID)\r\n            let response = await axios.post(dataUrl , tokenID)\r\n            dispatch({\r\n                type : GOOGLE_REGISTER_SUCCESS,\r\n                payload : {\r\n                    token : response.data.token\r\n                }\r\n            })\r\n            dispatch(alertActions.displayAlert(response.data.msg , \"success\"));\r\n            history.push(\"/\");\r\n        }\r\n        catch (error){\r\n            dispatch({\r\n                type : GOOGLE_REGISTER_FAILURE,\r\n                payload : {\r\n                    error : error\r\n                }\r\n            })\r\n            dispatch(alertActions.displayAlert(error , \"danger\"))\r\n            console.log(error)\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}