{"ast":null,"code":"import * as OrderActions from './orders.action';\nlet initialState = {\n  loading: false,\n  cartItems: [],\n  orders: [],\n  errorMessage: ''\n};\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case OrderActions.ADD_TO_CART_REQUEST:\n      if (state.cartItems.includes(action.payload.product, 0)) {\n        alert('products exits');\n\n        for (let cartItem of state.cartItems) {\n          if (cartItem._id === action.payload.product._id) {\n            cartItem.qty += 1;\n          }\n        }\n\n        return state;\n      } else return { ...state,\n        cartItems: [...state.cartItems, action.payload.product]\n      };\n\n    case OrderActions.ADD_TO_CART_FAILURE:\n      return { ...state,\n        errorMessage: action.payload\n      };\n\n    case OrderActions.INCREMENT_PRODUCT_QTY:\n      let incrementItems = state.cartItems.map(product => {\n        if (action.payload.productId === product._id) {\n          return { ...product,\n            qty: product.qty + 1\n          };\n        } else return product;\n      });\n      return { ...state,\n        cartItems: [...incrementItems]\n      };\n\n    case OrderActions.DECREMENT_PRODUCT_QTY:\n      let decrementItems = state.cartItems.map(product => {\n        if (action.payload.productId === product._id) {\n          return { ...product,\n            qty: product.qty - 1 > 0 ? product.qty - 1 : 1\n          };\n        } else return product;\n      });\n      return { ...state,\n        cartItems: [...decrementItems]\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["F:/Workspace/Projects/Brains-Kart/client/src/redux/orders/orders.reducer.ts"],"names":["OrderActions","initialState","loading","cartItems","orders","errorMessage","reducer","state","action","type","ADD_TO_CART_REQUEST","includes","payload","product","alert","cartItem","_id","qty","ADD_TO_CART_FAILURE","INCREMENT_PRODUCT_QTY","incrementItems","map","productId","DECREMENT_PRODUCT_QTY","decrementItems"],"mappings":"AAAA,OAAO,KAAKA,YAAZ,MAA8B,iBAA9B;AASA,IAAIC,YAAyB,GAAG;AAC5BC,EAAAA,OAAO,EAAG,KADkB;AAE5BC,EAAAA,SAAS,EAAG,EAFgB;AAG5BC,EAAAA,MAAM,EAAG,EAHmB;AAI5BC,EAAAA,YAAY,EAAG;AAJa,CAAhC;AAOA,OAAQ,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAwBO,MAAxB,KAAsD;AAC1E,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,YAAY,CAACU,mBAAlB;AACI,UAAGH,KAAK,CAACJ,SAAN,CAAgBQ,QAAhB,CAAyBH,MAAM,CAACI,OAAP,CAAeC,OAAxC,EAAiD,CAAjD,CAAH,EACA;AACIC,QAAAA,KAAK,CAAC,gBAAD,CAAL;;AACA,aAAK,IAAIC,QAAT,IAAqBR,KAAK,CAACJ,SAA3B,EAAqC;AACjC,cAAGY,QAAQ,CAACC,GAAT,KAAiBR,MAAM,CAACI,OAAP,CAAeC,OAAf,CAAuBG,GAA3C,EAA+C;AAC3CD,YAAAA,QAAQ,CAACE,GAAT,IAAc,CAAd;AACH;AACJ;;AACD,eAAOV,KAAP;AACH,OATD,MAUK,OAAO,EACR,GAAGA,KADK;AAERJ,QAAAA,SAAS,EAAG,CAAC,GAAGI,KAAK,CAACJ,SAAV,EAAsBK,MAAM,CAACI,OAAP,CAAeC,OAArC;AAFJ,OAAP;;AAIT,SAAKb,YAAY,CAACkB,mBAAlB;AACI,aAAO,EACH,GAAGX,KADA;AAEHF,QAAAA,YAAY,EAAGG,MAAM,CAACI;AAFnB,OAAP;;AAIJ,SAAKZ,YAAY,CAACmB,qBAAlB;AACI,UAAIC,cAA2B,GAAGb,KAAK,CAACJ,SAAN,CAAgBkB,GAAhB,CAAqBR,OAAD,IAAa;AAC/D,YAAGL,MAAM,CAACI,OAAP,CAAeU,SAAf,KAA6BT,OAAO,CAACG,GAAxC,EAA4C;AACxC,iBAAM,EACF,GAAGH,OADD;AAEFI,YAAAA,GAAG,EAAGJ,OAAO,CAACI,GAAR,GAAc;AAFlB,WAAN;AAIH,SALD,MAMK,OAAOJ,OAAP;AACR,OARiC,CAAlC;AASA,aAAO,EACH,GAAGN,KADA;AAEHJ,QAAAA,SAAS,EAAG,CAAC,GAAGiB,cAAJ;AAFT,OAAP;;AAIJ,SAAKpB,YAAY,CAACuB,qBAAlB;AACI,UAAIC,cAA2B,GAAGjB,KAAK,CAACJ,SAAN,CAAgBkB,GAAhB,CAAqBR,OAAD,IAAa;AAC/D,YAAGL,MAAM,CAACI,OAAP,CAAeU,SAAf,KAA6BT,OAAO,CAACG,GAAxC,EAA4C;AACxC,iBAAM,EACF,GAAGH,OADD;AAEFI,YAAAA,GAAG,EAAGJ,OAAO,CAACI,GAAR,GAAc,CAAd,GAAkB,CAAlB,GAAsBJ,OAAO,CAACI,GAAR,GAAc,CAApC,GAAwC;AAF5C,WAAN;AAIH,SALD,MAMK,OAAOJ,OAAP;AACR,OARiC,CAAlC;AASA,aAAO,EACH,GAAGN,KADA;AAEHJ,QAAAA,SAAS,EAAG,CAAC,GAAGqB,cAAJ;AAFT,OAAP;;AAIJ;AAAU,aAAOjB,KAAP;AAjDd;AAmDH,CApDO","sourcesContent":["import * as OrderActions from './orders.action';\r\nimport {IProduct} from \"../../Modules/products/Models/IProduct\";\r\n\r\nexport interface orderState {\r\n    loading : boolean,\r\n    cartItems : IProduct[],\r\n    orders : IProduct[],\r\n    errorMessage : string\r\n}\r\nlet initialState : orderState = {\r\n    loading : false,\r\n    cartItems : [] as IProduct[],\r\n    orders : [] as IProduct[],\r\n    errorMessage : ''\r\n}\r\n\r\nexport  const reducer = (state = initialState , action : any) : orderState => {\r\n    switch (action.type) {\r\n        case OrderActions.ADD_TO_CART_REQUEST :\r\n            if(state.cartItems.includes(action.payload.product, 0))\r\n            {\r\n                alert('products exits')\r\n                for (let cartItem of state.cartItems){\r\n                    if(cartItem._id === action.payload.product._id){\r\n                        cartItem.qty+=1\r\n                    }\r\n                }\r\n                return state;\r\n            }\r\n            else return {\r\n                ...state,\r\n                cartItems : [...state.cartItems , action.payload.product]\r\n            }\r\n        case OrderActions.ADD_TO_CART_FAILURE :\r\n            return {\r\n                ...state,\r\n                errorMessage : action.payload\r\n            }\r\n        case OrderActions.INCREMENT_PRODUCT_QTY :\r\n            let incrementItems : IProduct[] = state.cartItems.map((product) => {\r\n                if(action.payload.productId === product._id){\r\n                    return{\r\n                        ...product,\r\n                        qty : product.qty + 1\r\n                    }\r\n                }\r\n                else return product;\r\n            })\r\n            return {\r\n                ...state,\r\n                cartItems : [...incrementItems]\r\n            }\r\n        case OrderActions.DECREMENT_PRODUCT_QTY :\r\n            let decrementItems : IProduct[] = state.cartItems.map((product) => {\r\n                if(action.payload.productId === product._id){\r\n                    return{\r\n                        ...product,\r\n                        qty : product.qty - 1 > 0 ? product.qty - 1 : 1\r\n                    }\r\n                }\r\n                else return product;\r\n            })\r\n            return {\r\n                ...state,\r\n                cartItems : [...decrementItems]\r\n            }\r\n        default : return state\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}