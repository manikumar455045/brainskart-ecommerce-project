{"ast":null,"code":"import * as OrderActions from './orders.action';\nlet initialState = {\n  loading: false,\n  cartItems: [],\n  order: {},\n  orderList: [],\n  errorMessage: ''\n};\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case OrderActions.ADD_TO_CART_REQUEST:\n      let existingCartItem = state.cartItems.find(cartItem => cartItem._id === action.payload.product._id);\n\n      if (existingCartItem) {\n        alert(\"Product already exists in Cart\");\n        return state;\n      } else return { ...state,\n        cartItems: [...state.cartItems, action.payload.product]\n      };\n\n    case OrderActions.ADD_TO_CART_FAILURE:\n      return { ...state,\n        errorMessage: action.payload\n      };\n\n    case OrderActions.INCREMENT_PRODUCT_QTY:\n      let incrementItems = state.cartItems.map(product => {\n        if (action.payload.productId === product._id) {\n          return { ...product,\n            qty: product.qty + 1\n          };\n        } else return product;\n      });\n      return { ...state,\n        cartItems: [...incrementItems]\n      };\n\n    case OrderActions.DECREMENT_PRODUCT_QTY:\n      let decrementItems = state.cartItems.map(product => {\n        if (action.payload.productId === product._id) {\n          return { ...product,\n            qty: product.qty - 1 > 0 ? product.qty - 1 : 1\n          };\n        } else return product;\n      });\n      return { ...state,\n        cartItems: [...decrementItems]\n      };\n\n    case OrderActions.REMOVE_CART_ITEM:\n      let updatedCartItems = state.cartItems.filter(cartItem => cartItem._id !== action.payload);\n      return { ...state,\n        cartItems: [...updatedCartItems]\n      };\n    // Make Stripe Payments\n\n    case OrderActions.MAKE_PAYMENT_REQUEST:\n      return { ...state,\n        loading: true\n      };\n\n    case OrderActions.MAKE_PAYMENT_SUCCESS:\n      return { ...state,\n        loading: false\n      };\n\n    case OrderActions.MAKE_PAYMENT_FAILURE:\n      return { ...state,\n        loading: false,\n        errorMessage: action.payload\n      };\n\n    case OrderActions.PLACE_ORDER_REQUEST:\n      return { ...state,\n        loading: true\n      };\n\n    case OrderActions.PLACE_ORDER_SUCCESS:\n      return { ...state,\n        order: action.payload,\n        loading: false\n      };\n\n    case OrderActions.PLACE_ORDER_FAILURE:\n      return { ...state,\n        loading: false,\n        errorMessage: action.payload\n      };\n\n    case OrderActions.CLEAR_CART:\n      return { ...state,\n        cartItems: [],\n        order: {}\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["F:/Workspace/Projects/Brains-Kart/brainskart-ecommerce-project/client/src/redux/orders/orders.reducer.ts"],"names":["OrderActions","initialState","loading","cartItems","order","orderList","errorMessage","reducer","state","action","type","ADD_TO_CART_REQUEST","existingCartItem","find","cartItem","_id","payload","product","alert","ADD_TO_CART_FAILURE","INCREMENT_PRODUCT_QTY","incrementItems","map","productId","qty","DECREMENT_PRODUCT_QTY","decrementItems","REMOVE_CART_ITEM","updatedCartItems","filter","MAKE_PAYMENT_REQUEST","MAKE_PAYMENT_SUCCESS","MAKE_PAYMENT_FAILURE","PLACE_ORDER_REQUEST","PLACE_ORDER_SUCCESS","PLACE_ORDER_FAILURE","CLEAR_CART"],"mappings":"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","sourcesContent":["import * as OrderActions from './orders.action';\r\nimport {IProduct} from \"../../Modules/products/Models/IProduct\";\r\nimport {IOrder} from \"../../Modules/orders/IOrders\";\r\n\r\n\r\n\r\nexport interface orderState {\r\n    loading : boolean,\r\n    cartItems : IProduct[],\r\n    order : IOrder,\r\n    orderList : IOrder[],\r\n    errorMessage : string\r\n}\r\nlet initialState : orderState = {\r\n    loading : false,\r\n    cartItems : [] as IProduct[],\r\n    order : {} as IOrder,\r\n    orderList : [] as IOrder[],\r\n    errorMessage : ''\r\n}\r\n\r\nexport  const reducer = (state = initialState , action : any) : orderState => {\r\n    switch (action.type) {\r\n        case OrderActions.ADD_TO_CART_REQUEST :\r\n            let existingCartItem = state.cartItems.find(cartItem => cartItem._id === action.payload.product._id)\r\n            if(existingCartItem){\r\n                alert(\"Product already exists in Cart\")\r\n                return state\r\n            }\r\n            else\r\n            return {\r\n                ...state,\r\n                cartItems : [...state.cartItems , action.payload.product]\r\n            }\r\n        case OrderActions.ADD_TO_CART_FAILURE :\r\n            return {\r\n                ...state,\r\n                errorMessage : action.payload\r\n            }\r\n        case OrderActions.INCREMENT_PRODUCT_QTY :\r\n            let incrementItems : IProduct[] = state.cartItems.map((product) => {\r\n                if(action.payload.productId === product._id){\r\n                    return{\r\n                        ...product,\r\n                        qty : product.qty + 1\r\n                    }\r\n                }\r\n                else return product;\r\n            })\r\n            return {\r\n                ...state,\r\n                cartItems : [...incrementItems]\r\n            }\r\n        case OrderActions.DECREMENT_PRODUCT_QTY :\r\n            let decrementItems : IProduct[] = state.cartItems.map((product) => {\r\n                if(action.payload.productId === product._id){\r\n                    return{\r\n                        ...product,\r\n                        qty : product.qty - 1 > 0 ? product.qty - 1 : 1\r\n                    }\r\n                }\r\n                else return product;\r\n            })\r\n            return {\r\n                ...state,\r\n                cartItems : [...decrementItems]\r\n            }\r\n        case OrderActions.REMOVE_CART_ITEM :\r\n            let updatedCartItems : IProduct[] = state.cartItems.filter(cartItem => cartItem._id !== action.payload)\r\n            return {\r\n                ...state,\r\n                cartItems : [...updatedCartItems]\r\n            }\r\n        // Make Stripe Payments\r\n        case OrderActions.MAKE_PAYMENT_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading : true\r\n            };\r\n        case OrderActions.MAKE_PAYMENT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading : false\r\n            };\r\n        case OrderActions.MAKE_PAYMENT_FAILURE:\r\n            return {\r\n                ...state,\r\n                loading : false,\r\n                errorMessage : action.payload\r\n            };\r\n        case OrderActions.PLACE_ORDER_REQUEST :\r\n            return {\r\n                ...state,\r\n                loading : true\r\n            }\r\n        case OrderActions.PLACE_ORDER_SUCCESS :\r\n            return {\r\n                ...state,\r\n                order : action.payload,\r\n                loading : false\r\n            }\r\n        case OrderActions.PLACE_ORDER_FAILURE :\r\n            return {\r\n                ...state,\r\n                loading : false,\r\n                errorMessage : action.payload\r\n            }\r\n        case OrderActions.CLEAR_CART :\r\n            return {\r\n                ...state,\r\n                cartItems : [],\r\n                order : {} as IOrder\r\n            }\r\n        default : return state\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}