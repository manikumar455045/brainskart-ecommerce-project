{"ast":null,"code":"import axios from \"axios\";\nimport * as AuthUtil from \"../../Authentication/AuthUtil\";\nimport * as TokenUtil from \"../../Authentication/TokenUtil\";\nimport { displayAlert } from \"../alert/alert.action\";\nexport const PRODUCT_UPLOAD_REQUEST = \"PRODUCT_UPLOAD_REQUEST\";\nexport const PRODUCT_UPLOAD_SUCCESS = \"PRODUCT_UPLOAD_SUCCESS\";\nexport const PRODUCT_UPLOAD_FAILURE = \"PRODUCT_UPLOAD_FAILURE\";\nexport const uploadProduct = (product, history) => {\n  return async dispatch => {\n    dispatch({\n      type: PRODUCT_UPLOAD_REQUEST\n    });\n\n    try {\n      if (AuthUtil.isLoggedIn()) {\n        TokenUtil.setHeaders(AuthUtil.getToken());\n      }\n\n      let dataUrl = `${process.env.REACT_APP_SERVER_URL}/api/products/upload`;\n      let response = await axios.post(dataUrl, product);\n      dispatch({\n        type: PRODUCT_UPLOAD_SUCCESS,\n        payload: response.data\n      });\n      dispatch(displayAlert(response.data.msg, 'success'));\n      history.push('/');\n    } catch (error) {\n      dispatch({\n        type: PRODUCT_UPLOAD_FAILURE,\n        payload: error.response.data\n      });\n    }\n  };\n};","map":{"version":3,"sources":["F:/Workspace/Projects/Brains-Kart/client/src/redux/product/product.action.ts"],"names":["axios","AuthUtil","TokenUtil","displayAlert","PRODUCT_UPLOAD_REQUEST","PRODUCT_UPLOAD_SUCCESS","PRODUCT_UPLOAD_FAILURE","uploadProduct","product","history","dispatch","type","isLoggedIn","setHeaders","getToken","dataUrl","process","env","REACT_APP_SERVER_URL","response","post","payload","data","msg","push","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,KAAKC,QAAZ,MAA0B,+BAA1B;AACA,OAAO,KAAKC,SAAZ,MAA2B,gCAA3B;AACA,SAAQC,YAAR,QAA2B,uBAA3B;AAEA,OAAO,MAAMC,sBAA+B,GAAG,wBAAxC;AACP,OAAO,MAAMC,sBAA+B,GAAG,wBAAxC;AACP,OAAO,MAAMC,sBAA+B,GAAG,wBAAxC;AAEP,OAAO,MAAMC,aAAa,GAAG,CAACC,OAAD,EAAsBC,OAAtB,KAAwC;AACjE,SAAO,MAAOC,QAAP,IAA0B;AAC7BA,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAGP;AADF,KAAD,CAAR;;AAGA,QAAG;AACC,UAAGH,QAAQ,CAACW,UAAT,EAAH,EAAyB;AACrBV,QAAAA,SAAS,CAACW,UAAV,CAAqBZ,QAAQ,CAACa,QAAT,EAArB;AACH;;AACD,UAAIC,OAAO,GAAI,GAAEC,OAAO,CAACC,GAAR,CAAYC,oBAAqB,sBAAlD;AACA,UAAIC,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,IAAN,CAAWL,OAAX,EAAqBP,OAArB,CAArB;AACAE,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAAGN,sBADF;AAELgB,QAAAA,OAAO,EAAGF,QAAQ,CAACG;AAFd,OAAD,CAAR;AAIAZ,MAAAA,QAAQ,CAACP,YAAY,CAACgB,QAAQ,CAACG,IAAT,CAAcC,GAAf,EAAqB,SAArB,CAAb,CAAR;AACAd,MAAAA,OAAO,CAACe,IAAR,CAAa,GAAb;AACH,KAZD,CAaA,OAAOC,KAAP,EAAa;AACTf,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAAGL,sBADF;AAELe,QAAAA,OAAO,EAAGI,KAAK,CAACN,QAAN,CAAeG;AAFpB,OAAD,CAAR;AAIH;AACJ,GAvBD;AAwBH,CAzBM","sourcesContent":["import axios from \"axios\";\r\nimport {IProduct} from \"../../Modules/products/Models/IProduct\";\r\nimport * as AuthUtil from \"../../Authentication/AuthUtil\"\r\nimport * as TokenUtil from \"../../Authentication/TokenUtil\"\r\nimport {displayAlert} from \"../alert/alert.action\";\r\n\r\nexport const PRODUCT_UPLOAD_REQUEST : string = \"PRODUCT_UPLOAD_REQUEST\";\r\nexport const PRODUCT_UPLOAD_SUCCESS : string = \"PRODUCT_UPLOAD_SUCCESS\";\r\nexport const PRODUCT_UPLOAD_FAILURE : string = \"PRODUCT_UPLOAD_FAILURE\";\r\n\r\nexport const uploadProduct = (product : IProduct , history : any) => {\r\n    return async (dispatch : any) => {\r\n        dispatch({\r\n            type : PRODUCT_UPLOAD_REQUEST\r\n        })\r\n        try{\r\n            if(AuthUtil.isLoggedIn()){\r\n                TokenUtil.setHeaders(AuthUtil.getToken() as string)\r\n            }\r\n            let dataUrl = `${process.env.REACT_APP_SERVER_URL}/api/products/upload`;\r\n            let response = await axios.post(dataUrl , product);\r\n            dispatch({\r\n                type : PRODUCT_UPLOAD_SUCCESS,\r\n                payload : response.data\r\n            })\r\n            dispatch(displayAlert(response.data.msg , 'success'))\r\n            history.push('/')\r\n        }\r\n        catch (error){\r\n            dispatch({\r\n                type : PRODUCT_UPLOAD_FAILURE,\r\n                payload : error.response.data\r\n            })\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}